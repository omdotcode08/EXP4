Experiment 4: Create a Simple React Application to Display Items Fetched from an API
Objective
To build a React application that fetches data from an API and displays it using components. Each item will be displayed as a separate component with its own state.
Tools Required
Software:
Node.js and npm (for managing React and its dependencies).
Code editor (e.g., Visual Studio Code).
Browser (e.g., Google Chrome) for testing the application.
Hardware:
A computer with at least 4GB RAM and an internet connection.
Prerequisites:
Node.js and npm installed: Make sure you have Node.js and npm installed on your system to manage packages and run your React app.
Basic knowledge of React components, state, and props: Familiarity with React's core concepts like functional components, state management using useState, and passing data using props.

Step-by-Step Instructions:
1. Set Up Your React Environment:
Install Node.js: You need Node.js installed on your machine. You can download it from Node.js official website.
Check Installation: After installing Node.js, you can verify the installation by running the following commands in your terminal:
node -v
npm -v
These commands should return the version of Node.js and npm that you have installed.
Create a React App: Use the Create React App tool to set up a new React project.
npx create-react-app fetch-api-example
cd fetch-api-example
npm start
This command will set up a React project and start a local development server on http://localhost:3000/.
2. Create a Functional Component to Fetch Data:
Open the src folder and navigate to the App.js file.
Import React and useState, useEffect: In order to work with React components and fetch data, you'll need to import useState and useEffect hooks.
javascript
import React, { useState, useEffect } from 'react';
State Initialization: Use useState to create state variables for storing the list of items and loading/error states.
javascript
const [items, setItems] = useState([]);
const [loading, setLoading] = useState(true);
const [error, setError] = useState(null);
Fetching Data Using useEffect: Use useEffect to trigger the data fetch when the component mounts. This will allow the API call to be made once the component is rendered.
javascript
useEffect(() => {
fetch('https://jsonplaceholder.typicode.com/posts') // Sample API endpoint
    .then((response) => response.json())
    .then((data) => {
      setItems(data);    // Store the fetched data in state
      setLoading(false); // Set loading to false once data is fetched
    })
    .catch((error) => {
      setError('Error fetching data');
      setLoading(false);
    });
}, []);
In the above code:
The useEffect hook ensures the fetch request is made when the component loads.
The API used here is a sample JSON placeholder API (https://jsonplaceholder.typicode.com/posts), but you can replace it with any valid API endpoint.
If the request is successful, the data is stored in the items state, and the loading state is set to false. If there is an error, it’s caught and displayed.
3. Render the Data in the Component:
In the JSX section of your App.js, check for loading and error states, and render the fetched items once the data is successfully retrieved.
javascript
return (
  <div className="App">
    <h1>Fetched Items</h1>
    {loading ? (
      <p>Loading...</p> // Show loading message while data is being fetched
    ) : error ? (
      <p>{error}</p> // Display error message if there's an issue fetching data
    ) : (
      <ul>
        {items.map((item) => (
          <li key={item.id}>
            <h3>{item.title}</h3>
            <p>{item.body}</p>
          </li>
        ))}
      </ul>
    )}
  </div>
);
If loading is true, display a loading message.
If there’s an error (when error is not null), display the error message.
If data is fetched successfully, display the list of items using the map() function.
4. Test the Application:
Run the React App: Once you’ve set up the component and added the logic for fetching and displaying the data, run the app using:
bash
npm start
The application will display the items fetched from the API in a list format. While data is being fetched, it will show a "Loading..." message. If there’s any error in the API request, an error message will be displayed.
5. Optional: Style the Application:
You can style the app using basic CSS to make it more presentable. For example, add some CSS rules in App.css:
css
.App {
  font-family: Arial, sans-serif;
  text-align: center;
}

h1 {
  color: #333;
}

ul {
  list-style-type: none;
  padding: 0;
}

li {
  background-color: #f4f4f4;
  margin: 10px;
  padding: 10px;
  border-radius: 4px;
}

Expected Results:
Upon successful completion, your React application should display a list of items fetched from the API.
It should handle the loading state and show an appropriate message while waiting for data.
If there is an error in the fetch request, the error should be displayed.

Conclusion:
In this experiment, we created a simple React application that fetches and displays data from an API. We learned how to use the useState and useEffect hooks to manage state and handle side effects (like fetching data) in functional components. This type of data fetching is common in real-world applications, where data is retrieved from external APIs and displayed in a user-friendly way. Through this experiment, you also gained experience in managing loading states and error handling, which are essential for building robust and interactive web applications.


